import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { Persona } from '@/lib/persona-service';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface EvaluationRequest {
  persona: Persona;
  conversation: Array<{ role: string; content: string }>;
  assessment: string;
  weights?: {
    accuracy?: number;
    empathy?: number;
    clarity?: number;
  };
}

interface EvaluationResult {
  scores: {
    accuracy: number;
    empathy: number;
    clarity: number;
    overall: number;
  };
  strengths: string[];
  weaknesses: string[];
  suggestedImprovements: string[];
  refinedAssessment: string;
}

export async function POST(req: Request) {
  try {
    // Parse the request body
    const { persona, conversation, assessment, weights = {} }: EvaluationRequest = await req.json();

    // Validate required fields
    if (!persona || !conversation || !assessment) {
      return NextResponse.json(
        { error: 'Missing required fields: persona, conversation, or assessment' },
        { status: 400 }
      );
    }

    // Set default weights if not provided
    const evaluationWeights = {
      accuracy: weights.accuracy || 0.4,
      empathy: weights.empathy || 0.3,
      clarity: weights.clarity || 0.3,
    };

    // Create a prompt for evaluating the assessment
    const prompt = `
      You are evaluating a clinical assessment note generated by an AI assistant for a cancer patient. 
      
      PATIENT PERSONA:
      Name: ${persona.name}
      Age: ${persona.age}
      Gender: ${persona.gender}
      Cancer Type: ${persona.cancerType}
      Cancer Stage: ${persona.cancerStage}
      Treatment Status: ${persona.treatmentStatus || 'Unknown'}
      
      Psychological Profile:
      - Anxiety Level (1-10): ${persona.psychologicalProfile?.anxiety || 5}
      - Depression Level (1-10): ${persona.psychologicalProfile?.depression || 5}
      - Distress Level (1-10): ${persona.psychologicalProfile?.distress || 5}
      - Self-Efficacy (1-10): ${persona.psychologicalProfile?.selfEfficacy || 5}
      - Support Network Strength (1-10): ${persona.psychologicalProfile?.supportNetworkStrength || 5}
      
      CONVERSATION SUMMARY:
      ${conversation.map(msg => `${msg.role.toUpperCase()}: ${msg.content}`).join('\n\n')}
      
      ASSESSMENT TO EVALUATE:
      ${assessment}
      
      EVALUATION CRITERIA:
      1. Accuracy (${evaluationWeights.accuracy * 100}% of total score): How well does the assessment reflect the patient's actual situation, concerns, and psychological state as revealed in the conversation?
      2. Empathy (${evaluationWeights.empathy * 100}% of total score): Does the assessment demonstrate understanding and compassion for the patient's experience?
      3. Clarity (${evaluationWeights.clarity * 100}% of total score): Is the assessment well-organized, concise, and easy to understand?
      
      EVALUATION TASK:
      1. Score each criterion on a scale of 1-10, with 10 being the highest.
      2. Calculate an overall weighted score based on the weights provided.
      3. Identify 2-3 specific strengths of the assessment.
      4. Identify 2-3 specific weaknesses or areas for improvement.
      5. Provide 2-3 specific suggestions for improving the assessment.
      6. Create a refined version of the assessment that addresses the weaknesses.
      
      Format your response as a JSON object with the following structure:
      {
        "scores": {
          "accuracy": number,
          "empathy": number,
          "clarity": number,
          "overall": number
        },
        "strengths": [string, string, ...],
        "weaknesses": [string, string, ...],
        "suggestedImprovements": [string, string, ...],
        "refinedAssessment": string
      }
    `;

    // Generate the evaluation using OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { 
          role: "system", 
          content: "You are an expert in clinical psychology and oncology. You evaluate clinical assessments for accuracy, empathy, and clarity. You provide constructive feedback and suggestions for improvement."
        },
        { 
          role: "user", 
          content: prompt 
        }
      ],
      temperature: 0.3,
      max_tokens: 2000,
      response_format: { type: "json_object" }
    });

    // Extract and parse the evaluation result
    const resultText = completion.choices[0]?.message?.content?.trim() || '{}';
    const result: EvaluationResult = JSON.parse(resultText);

    // Return the evaluation result
    return NextResponse.json(result);
  } catch (error) {
    console.error('Error evaluating assessment:', error);
    return NextResponse.json(
      { error: 'Failed to evaluate assessment' },
      { status: 500 }
    );
  }
} 