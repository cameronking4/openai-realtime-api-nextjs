/**
 * Types for the LLM-driven testing and prompt refinement system
 */

/**
 * Patient Persona definition
 */
export interface PatientPersona {
  id: string;
  name: string;
  age: number;
  gender: string;
  diagnosis: {
    cancerType: string;
    stage: string;
    timeOfDiagnosis: string;
  };
  treatmentStatus: string;  // 'pre-treatment', 'in-treatment', 'post-treatment', 'palliative'
  psychologicalProfile: {
    anxiety: number;  // 1-10 scale
    depression: number;
    distress: number;
    selfEfficacy: number;
    supportNetworkStrength: number;
  };
  communication: {
    articulationLevel: number;  // 1-10 scale (how well they express themselves)
    openness: number;           // 1-10 scale (willingness to share)
    directness: number;         // 1-10 scale (how straightforward)
    emotionalExpression: number; // 1-10 scale (how emotionally expressive)
  };
  background: {
    familyStatus: string;
    occupation: string;
    importantLifeEvents: string[];
    supportSystem: string[];
  };
  behavioralPatterns: string[];  // E.g., "tends to change subject when discussing prognosis"
  personalConcerns: string[];    // E.g., "worried about impact on children"
}

/**
 * Conversation simulation types
 */
export interface ConversationItem {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
}

export interface SimulationConfig {
  personaId: string;
  maxTurns: number;
  simulationGoals: string[];  // E.g., "test anxiety assessment accuracy"
  randomness: number;         // Controls how strictly the LLM follows the persona
  recordMetrics: boolean;     // Whether to track metrics during simulation
}

export interface SimulationResult {
  conversationId: string;
  transcript: ConversationItem[];  // The full conversation transcript
  assessmentResult: any;           // The assessment generated by the cancer chat
  metrics: {
    conversationLength: number;
    responseDelays: number[];      // Simulated thinking time between responses
    topicChanges: number;
    questionsAsked: number;
    questionsAnswered: number;
    emotionalMoments: Array<{text: string, emotion: string, intensity: number}>;
  };
}

/**
 * Assessment evaluation types
 */
export interface MetricScore {
  score: number;
  confidence: number;
  justification: string;
}

export interface EvaluationResult {
  personaId: string;
  conversationId: string;
  promptEffectiveness: {
    naturalness: number;        // 1-10 scale
    efficiency: number;         // 1-10 scale
    userBurden: number;         // 1-10 scale (lower is better)
    coverageOfDomains: number;  // Percentage of assessment domains covered
  };
  assessmentAccuracy: {
    overallAccuracy: number;    // 1-10 scale
    domainSpecificAccuracy: Record<string, number>;  // For each assessment domain
    falsePositives: string[];   // Issues detected that weren't in the persona
    falseNegatives: string[];   // Issues in the persona that weren't detected
  };
  qualitativeAnalysis: string;  // Detailed analysis of the conversation
  promptImprovementSuggestions: string[];  // Specific suggestions for prompt improvement
}

/**
 * Prompt refinement types
 */
export interface PromptRefinementConfig {
  numberOfIterations: number;
  evaluationsPerIteration: number;
  targetMetrics: {
    minAccuracy: number;
    minNaturalness: number;
    maxUserBurden: number;
  };
  preserveKeyElements: string[];  // Critical elements that must remain in prompts
}

export interface PromptVersion {
  id: string;
  version: number;
  promptType: 'conversation' | 'assessment';
  content: string;
  createdAt: string;
  metrics?: {
    accuracy: number;
    naturalness: number;
    userBurden: number;
  };
}

export interface RefinementResult {
  initialPrompts: {
    conversation: string;
    assessment: string;
  };
  finalPrompts: {
    conversation: string;
    assessment: string;
  };
  iterationResults: Array<{
    iteration: number;
    evaluationResults: EvaluationResult[];
    promptChanges: {
      conversation: string;
      assessment: string;
    };
    improvementMetrics: {
      accuracyChange: number;
      naturalnessChange: number;
      userBurdenChange: number;
    };
  }>;
  overallImprovement: {
    accuracyChange: number;
    naturalnessChange: number;
    userBurdenChange: number;
  };
}

/**
 * Dashboard data types
 */
export interface DashboardData {
  currentIteration: number;
  personasTested: number;
  conversationsSimulated: number;
  metricTrends: {
    accuracy: number[];
    naturalness: number[];
    userBurden: number[];
  };
  promptVersionHistory: Array<{
    version: number;
    prompt: string;
    performance: {
      accuracy: number;
      naturalness: number;
      userBurden: number;
    };
  }>;
  topIssues: string[];
  recentConversations: SimulationResult[];
} 